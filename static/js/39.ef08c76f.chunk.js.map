{"version":3,"file":"static/js/39.ef08c76f.chunk.js","mappings":"oMAEaA,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEdC,GAAWC,EAAAA,EAAAA,MACjB,OACI,wBACSF,EAAMG,KAAI,gBAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,GAAT,OAAiBD,IACxB,yBACI,UAAC,KAAD,CAAME,GAAE,kBAAaD,GAAME,MAAO,CAACC,KAAMP,GAAzC,cAAsDG,MADjDC,EADF,KAS1B,C,iGChBYI,EAAY,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAoBvB,OACI,kBAAMC,SAnBW,SAAAC,GACjBA,EAAIC,iBAEJ,IAAMC,EAASF,EAAIG,cAAcC,SAASC,MAAMC,MAEhDC,QAAQC,IAAIN,GAEU,KAAlBA,EAAOO,QAKXX,EAASI,GACTF,EAAIG,cAAcO,SALdC,MAAM,6HAOb,EAIG,WACI,kBAAOC,KAAK,OAAOC,KAAK,WACxB,mBAAQD,KAAK,SAAb,sBAGX,E,2BCWD,EA/Be,WAAO,IAAD,EACjB,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMd,EAAK,UAAGa,EAAaE,IAAI,gBAApB,QAAgC,GAU3C,IAPAC,EAAAA,EAAAA,YAAU,WACDhB,GAELiB,EAAAA,EAAAA,YAAsBjB,GAAOkB,KAAKP,EAErC,GAAE,CAACX,KAECU,EACD,OAAO,KAQX,OACI,4BACI,SAAClB,EAAD,CAAWC,SAPE,SAACe,GAClBM,EAAyB,KAATN,EAAc,CAAER,MAAOQ,GAAS,CAAC,EAEpD,IAKQE,EAAOS,UAAW,SAACrC,EAAA,EAAD,CAAOC,MAAO2B,EAAOS,YAInD,C,oBCnCD,IAAMC,EAAO,mCACPC,EAAO,+BAyEb,IAAMC,EAAM,CACRC,YAxEJ,SAAqBvB,GACjB,OACIwB,MAAM,GAAD,OAAIH,EAAJ,iCAAoCD,EAApC,kBAAqDpB,EAArD,+CACJkB,MAAK,SAAAO,GACF,OAAIA,EAASC,GACFD,EAASE,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,4DAAuBV,IAChD,GAER,EA8DGW,cA5DJ,WACI,OACIP,MAAM,GAAD,OAAIH,EAAJ,qCAAwCD,IAC5CF,MAAK,SAAAO,GACF,OAAIA,EAASC,GACFD,EAASE,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,4DAAuBV,IAChD,GAER,EAkDGY,kBAhDJ,SAA2BC,GAEnB,OACAT,MAAM,GAAD,OAAIH,EAAJ,kBAAqBY,EAArB,oBAAwCb,EAAxC,oBACJF,MAAK,SAAAO,GACF,OAAIA,EAASC,GACFD,EAASE,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,4DAAuBV,IAChD,GAGR,EAoCGc,UAlCJ,SAAmBD,GAEX,OACAT,MAAM,GAAD,OAAIH,EAAJ,kBAAqBY,EAArB,4BAAgDb,EAAhD,oBACJF,MAAK,SAAAO,GACF,OAAIA,EAASC,GACFD,EAASE,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,4DAAuBV,IAChD,GAGR,EAsBGe,aApBJ,SAAsBF,GAEd,OACAT,MAAM,GAAD,OAAIH,EAAJ,kBAAqBY,EAArB,4BAAgDb,EAAhD,2BACJF,MAAK,SAAAO,GACF,OAAIA,EAASC,GACFD,EAASE,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,4DAAuBV,IAChD,GAGR,GAUD,K","sources":["components/Movie/Movie.js","components/SearchBox/SearchBox.js","pages/Movies.js","services/movies-api.js"],"sourcesContent":["import { Link, useLocation} from \"react-router-dom\";\n\nexport const Movie = ({ items }) => {\n\n    const location = useLocation();\n    return (\n        <ul>\n                {items.map(({title, id}) => title &&\n                    <li key={id}>\n                        <Link to={`/movies/${id}`} state={{from: location}}> {title}</Link>\n                    </li>     \n            )}\n            \n        </ul>\n        \n    )\n}","export const SearchBox = ({onSearch}) => {\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n\n        const search = evt.currentTarget.elements.query.value;\n\n        console.log(search)\n\n        if (search.trim() === '') {\n            alert('Введите корректное имя');\n            return;\n        }\n\n        onSearch(search);\n        evt.currentTarget.reset();\n\n    }\n\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" name=\"query\" />\n            <button type=\"submit\">Search</button>\n        </form>\n    )\n}","import { Movie } from \"components/Movie/Movie\";\nimport { SearchBox } from \"components/SearchBox/SearchBox\";\nimport { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport moviesApi from 'services/movies-api';\n\nconst Movies = () => {\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query') ?? \"\";\n\n\n    useEffect(() => {\n        if (!query) return;\n\n        moviesApi.fetchMovies(query).then(setMovies)\n\n    }, [query])\n\n    if (!movies) {\n        return null;\n    }\n\n    const handleSearch = (name) => {\n        setSearchParams(name !== \"\" ? { query: name } : {});\n\n    }\n\n    return (\n        <div>\n            <SearchBox onSearch={handleSearch} />\n            {movies.results && <Movie items={movies.results} /> }\n        </div>\n    )\n    \n}\n\nexport default Movies;","const API_KEY = `1b50ba0e0b99203af5e26bdcee6d2298`;\nconst baseURL = `https://api.themoviedb.org/3`;\n\nfunction fetchMovies(query){\n    return (\n        fetch(`${baseURL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`Не верный ${API_KEY}`))\n        })\n    )\n}\n\nfunction fetchTrending(){\n    return (\n        fetch(`${baseURL}/trending/all/day?api_key=${API_KEY}`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`Не верный ${API_KEY}`))\n        })\n    )\n}\n\nfunction fetchMovieDetalis(movieId) {\n\n        return (\n        fetch(`${baseURL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`Не верный ${API_KEY}`))\n        })\n    )\n\n}\n\nfunction fetchCast(movieId) {\n\n        return (\n        fetch(`${baseURL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`Не верный ${API_KEY}`))\n        })\n    )\n\n}\n\nfunction fetchReviews(movieId) {\n\n        return (\n        fetch(`${baseURL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`Не верный ${API_KEY}`))\n        })\n    )\n\n}\n\nconst api = {\n    fetchMovies,\n    fetchTrending,\n    fetchMovieDetalis,\n    fetchCast,\n    fetchReviews,\n};\n\nexport default api"],"names":["Movie","items","location","useLocation","map","title","id","to","state","from","SearchBox","onSearch","onSubmit","evt","preventDefault","search","currentTarget","elements","query","value","console","log","trim","reset","alert","type","name","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","moviesApi","then","results","API_KEY","baseURL","api","fetchMovies","fetch","response","ok","json","Promise","reject","Error","fetchTrending","fetchMovieDetalis","movieId","fetchCast","fetchReviews"],"sourceRoot":""}